##########################
##  Create Tag on Main  ##
##   Reusable Workflow  ##
##########################

name: Create Tag on Main

# Automatically, Publish a Production Tag

on:
  workflow_call:
    inputs:
      gh_username:
        description: 'GitHub Username'
        required: true
        type: string
      gh_email:
        description: 'GitHub Email'
        required: true
        type: string
      main_branch:
        description: 'Name of the Main Branch. Example: main, master'
        required: false
        type: string
        default: ${{ github.event.pull_request.base.ref || vars.GIT_MAIN_BRANCH || 'main' }}
    secrets:
      GH_PAT_ACTION_RW:
        description: 'GitHub Personal Access Token with read/write permissions to Actions'
        required: true

jobs:
  tag_main:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 0 indicates all history for all branches and tags.
          set-safe-directory: ''  # `git config --global --add safe.directory <path>`
          token: '${{ secrets.GH_PAT_ACTION_RW }}'

      - name: Ensure we are on '${{ inputs.main_branch }}' branch
        run: git checkout "${{ inputs.main_branch }}"

      # Derive SEM VER from most recent tag
      - name: "Search tags, filter out those not matching v* and find latest"
        run: |
          LATEST_GIT_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
          echo "[INFO]: Latest Git Tag: $LATEST_GIT_TAG"
          echo "**Found Latest Git Tag: ${LATEST_GIT_TAG}**" >> $GITHUB_STEP_SUMMARY

          # remove starting v
          SEM_VER="${LATEST_GIT_TAG:1:${#LATEST_GIT_TAG}}"
          echo "**Derived Latest Release Sem Ver: ${SEM_VER}**" >> $GITHUB_STEP_SUMMARY

          # if tag ends with '-rc' strip it and store remaining string
          if [[ $LATEST_GIT_TAG == *"-rc" ]]; then
            # PROD_SEM_VER=${LATEST_GIT_TAG:1:${#LATEST_GIT_TAG}-4}
            PROD_SEM_VER="${SEM_VER%-rc}"

          # else if dev substring is found then store as it is
          elif [[ $LATEST_GIT_TAG == *"dev"* ]]; then
            PROD_SEM_VER="${SEM_VER}"
          else
            echo "[INFO] Unexpected Git Tag: $LATEST_GIT_TAG"
            echo "Exiting .."
            exit 1
          fi

          echo "- **New Sem Ver: ${PROD_SEM_VER}**" >> $GITHUB_STEP_SUMMARY
          echo SEMVER=$PROD_SEM_VER >> $GITHUB_ENV

      # Exit if Sem Ver is empty
      - name: "Exit if SOURCE Sem Ver is empty"
        run: |
          if [ -z "${{ env.SEMVER }}" ]; then
            echo "SEMVER is empty. Exiting .."
            exit 1
          fi

      # Prepen 'v' to the Sem Ver
      - name: 'Create Git Tag: v${{ env.SEMVER }}'
        run: echo "PROD_TAG=v${{ env.SEMVER }}" >> $GITHUB_ENV

      - run: git config --global user.name "${{ inputs.gh_username }}"
      - run: git config --global user.email "${{ inputs.gh_email }}"

      # PUSH TAG in MAIN BRANCH
      - name: "Push '${{ env.PROD_TAG }}' to trigger CI/CD for 'Production Release'"
        run: |
          git tag "${{ env.PROD_TAG }}" -m "Production Release ${{ env.PROD_TAG }}"
          git push origin "${{ env.PROD_TAG }}"

          echo "Tagged and Pushed '${{ env.PROD_TAG }}'" >> $GITHUB_STEP_SUMMARY
