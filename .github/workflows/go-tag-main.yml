##########################
##  Create Tag on Main  ##
##   Reusable Workflow  ##
##########################

name: Create Tag on Main

# Automatically, Publish a Production Tag

on:
  workflow_call:
    inputs:
      gh_username:
        description: 'GitHub Username'
        required: true
        type: string
      gh_email:
        description: 'GitHub Email'
        required: true
        type: string
      main_branch:
        description: 'Name of the Main Branch. Example: main, master'
        required: false
        type: string
        default: ${{ github.event.pull_request.base.ref || vars.GIT_MAIN_BRANCH || 'main' }}
    secrets:
      GH_PAT_ACTION_RW:
        description: 'GitHub Personal Access Token with read/write permissions to Actions'
        required: true

jobs:
  tag_main:
    runs-on: ubuntu-latest
    steps:
      - name: Dummy step to try things out
        run: |
          echo "-----------------"
          echo "INPUT value from env context is '${{ inputs.gh_username }}'"
          echo "-----------------"
          exit 1
      - name: "Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 0 indicates all history for all branches and tags.
          set-safe-directory: ''  # `git config --global --add safe.directory <path>`
          ref: ${{ inputs.main_branch }}
          token: '${{ secrets.GH_PAT_ACTION_RW }}'

      # Find latest tag and derive Sem Ver
      - name: Find most recently pushed Git Tag v*
        run: echo "LATEST_GIT_TAG=$(git tag -l 'v*' | sort -V | tail -n 1)" >> $GITHUB_ENV

      - run: 'echo "**Most Recent Git Tag: ${{ env.LATEST_GIT_TAG }}**" >> $GITHUB_STEP_SUMMARY'

      # if tag ends with '-rc' strip it and store remaining string
      - if: contains(env.LATEST_GIT_TAG, '-rc')
        run: echo PROD_GIT_TAG="${LATEST_GIT_TAG%-rc}" >> $GITHUB_ENV

      - if: contains(env.LATEST_GIT_TAG, 'dev')
        run: echo PROD_GIT_TAG="${LATEST_GIT_TAG}" >> $GITHUB_ENV

      - run: 'echo "- **New Sem Ver Release Tag: ${{ env.PROD_GIT_TAG }}**" >> $GITHUB_STEP_SUMMARY'

      # if PROD_GIT_TAG is empty/not-populated
      - if: env.PROD_GIT_TAG == ''
        run: 'echo "[ERROR] Could not derive new Prod Release Git Tag from most recent discovered tag: ${{ env.LATEST_GIT_TAG }}. Exiting .." && exit 1'

      - run: git config --global user.name "${{ inputs.gh_username }}"
      - run: git config --global user.email "${{ inputs.gh_email }}"

      ### PUSH TAG in MAIN BRANCH ###
      - name: "Push '${{ env.PROD_GIT_TAG }}' to trigger CI/CD for 'Production Release'"
        run: |
          git tag "${{ env.PROD_GIT_TAG }}" -m "Production Release ${{ env.PROD_GIT_TAG }}"
          git push origin "${{ env.PROD_GIT_TAG }}"

          echo "Tagged and Pushed '${{ env.PROD_GIT_TAG }}'" >> $GITHUB_STEP_SUMMARY
