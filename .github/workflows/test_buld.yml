###############################
##     Automated Build QA    ##
##     Reusable Workflow     ##
###############################

# TODO run Tests in Parallel Jobs

# Triggers on push to any branch, or PR to main

#### INPUTS ####

## POLICY:
# - 0 = Off
# - 1 = On

## JOB_MATRIX:
# eg: "{\"platform\":[\"ubuntu-latest\"], \"python-version\":[\"3.10\"]}"
# eg: FULL_MATRIX_STRATEGY: "{\"platform\": [\"ubuntu-latest\", \"macos-latest\", \"windows-latest\"], \"python-version\": [\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\"]}"

## BUILD_INSTALLATION:
# at least one or max all of {edit, sdist, wheel}

## TOX_INI:
# Optional file for overidding default front-end tox.ini


## STEPS ##

## 1. Create empemeral "Carrier" Branch to "put" User Changes ##
## 2. Put User Changes (Code for Windows Test) into the "Carrier" Branch ##
## 3. Set CI Pipeline Settings to 'Only Windows Build and Test' Mode ##
## 4. Trigger CI Pipeline ##
## 5. Clean Up ##


# Features

# - Configurable Platform, and Version of Runtime
# - Testing different build installations (ie different builder, compiler, etc)
# - On/Off switches for Checks, shipped by default
# - Fully-overridable "front-end" (to the Checks), which ships by default


on:
  workflow_call:
    inputs:
      # DISTRO NAME
      distro_name:
        required: true
        description: 'Name of the distro to build. Currently critical for discovering built distro file names.'
        type: string

      typecheck_policy:
        required: false
        type: string
        default: "1"

      # PEP 440 VERSION to expect
      pep440_version:
        required: true
        description: 'PEP 440 VERSION to expect. Currently critical for discovering built distro file names.'
        type: string

      # JOB_MATRIX
      job_matrix:
        required: false
        type: string
        default: "{\"platform\": [\"ubuntu-latest\"], \"python-version\": [\"3.10\"]}"

      # POLICY
      run_policy:
        required: false
        type: string
        default: '1'

      # BUILD_INSTALLATION
      build_installation:
        required: false
        type: string
        default: 'edit sdist wheel'

      # ARTIFACT NAME
      artifact_name:
        required: false
        type: string
        default: 'dist'

    ### OUTPUTS ###
    # Map the workflow outputs to job outputs
    outputs:
      COVERAGE_ARTIFACT:
        description: "Artifact Name (id / alias) of Coverage XML"
        value: ${{ jobs.test_build.outputs.COVERAGE_ARTIFACT }}

env:
  ## Important Branches ##

  BRANCH_WITH_SEM_VER_TAGS: 'master'
  CARRIER_TEMP: 'empemeral-br-ci-quick-win-test'

jobs:
  test_build:
    runs-on: ${{ matrix.platform }}
    if: always() && inputs.run_policy != 0
    strategy:
      matrix: ${{fromJSON(inputs.job_matrix)}}
    outputs:
      SEMVER_PIP_FORMAT: ${{ steps.parse_version.outputs.SEMVER_PIP_FORMAT }}    
      COVERAGE_ARTIFACT: ${{ steps.set_coverage_artifact.outputs.COVERAGE_ARTIFACT }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SDIST_DIR: 'sdist_dir'
      WHEEL_DIR: 'wheel_dir'
      BUILD_DEST: 'dist'
    steps:
      - run: 'echo "OS: ${{ matrix.platform }}, Python: ${{ matrix.python-version }}"'
      # Setup Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: python -m pip install --upgrade pip && python -m pip install 'tox<4' tox-gh-actions

      - uses: actions/checkout@v4

      ### Sanity Checks ###
      - run: pip install pyroma
      - run: pyroma --directory .

      ### EDIT MODE Tests ###
      - name: Edit Mode Tests
        if: contains('${{ inputs.build_installation }}', 'edit')
        run: tox -e dev -vv -s false

      # - run: echo PEP440_DISTRO="${{ inputs.distro_name }}-${{ inputs.pep440_version }}" >> $GITHUB_ENV
      #   id: pep440_distro

      ### Build ###
      # build, avoids making wheels for our requirements / depependecies
      # BUILD_DEST controls where the wheel and tar.gz is stored
      # defaults to the DIST env var, which defaults to 'dist'

      ## Build Wheel with `build`, not `pip wheel` and Test ##
      - if: contains('${{ inputs.build_installation }}', 'build')
        run: tox -e build -vv -s false
        env:
          BUILD_DEST: ${{ env.BUILD_DEST }}

      - if: contains('${{ inputs.build_installation }}', 'build')
        id: distros
        run: |
          PEP440_DISTRO="${{ inputs.distro_name }}-${{ inputs.pep440_version }}"
          SDIST_NAME="${PEP440_DISTRO}.tar.gz"
          WHEEL_NAME="${PEP440_DISTRO}-py3-none-any.whl"

          echo SDIST_FILE="$BUILD_DEST/$SDIST_NAME" >> $GITHUB_OUTPUT
          echo WHEEL_FILE="$BUILD_DEST/$WHEEL_NAME" >> $GITHUB_OUTPUT
      
      # Pyroma: check Sdist
      - if: contains('${{ inputs.build_installation }}', 'build')
        run: pyroma --file "${{ steps.distros.outputs.SDIST_FILE }}"

      - if: contains('${{ inputs.build_installation }}', 'build')
        run: pip install twine
      
      # Twine: check Sdist
      - if: contains('${{ inputs.build_installation }}', 'build')
        run: python -m twine check "${{ steps.distros.outputs.SDIST_FILE }}"
      
      # Twine: check Wheel
      - if: contains('${{ inputs.build_installation }}', 'build')
        run: python -m twine check "${{ steps.distros.outputs.WHEEL_FILE }}"

      ## Install SDIST and TEST ##
      - if: contains('${{ inputs.build_installation }}', 'sdist')
        run: tox -e ga -vv -s false
        env:
          ARTIFACT: '${{ steps.distros.outputs.SDIST_FILE }}[test]'

      ## Install WHEEL and TEST ##
      - if: contains('${{ inputs.build_installation }}', 'sdist')
        run: tox -e ga -vv -s false
        env:
          ARTIFACT: '${{ steps.distros.outputs.WHEEL_FILE }}[test]'


      ##### CODE COVERAGE XML #####
      # Combines, and converts Code Coverage results (measured during tests) into XML
      - name: "Code Coverage, during tests, in XML: converts coverage results (ie per sdist, wheel) and formats them into XML"
        run: tox -e coverage --sitepackages -vv -s false

      - run: echo COVERAGE_FILE="coverage-${{ matrix.platform }}-${{ matrix.python-version }}.xml" >> $GITHUB_ENV
        
      - run: mv ./.tox/coverage.xml ${{ env.COVERAGE_FILE }}
        shell: bash

      - run: echo COVERAGE_ARTIFACT="ALL_CODE_COVERAGE" >> $GITHUB_OUTPUT
        id: set_coverage_artifact

      - name: "Upload Test Coverage as Artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.set_coverage_artifact.outputs.COVERAGE_ARTIFACT }}
          path: ${{ env.COVERAGE_FILE }}
          if-no-files-found: error


      ## Type Checking ##
      - name: Do Type Checking
        if: inputs.typecheck_policy != 0
        run: |
          tox -e type -vv -s false || true

          echo
          echo "Checking Result of Type Check.."

          if [ $? -eq 0 ]; then
            echo "Type Checking Passed"
          else
            if [ ${{ inputs.typecheck_policy }} -eq 1 ]; then
              echo "Type Checking Failed"
              exit 1
            fi
            echo "Type Checking Failed, but continuing"
          fi

      ## DISTROs (SDIST, WHEEL) ARTIFACTS ##
      - name: "Upload .TAR.GZ and .WHL Distro Artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact_name }}
          path: ${{ env.BUILD_DEST }}
          if-no-files-found: error
