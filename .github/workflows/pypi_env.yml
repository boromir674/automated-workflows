name: "PyPI Publish Environment"
on:
  workflow_call:
    inputs:
      distro_name:
        required: true
        type: string
      # PEP 440 compliant version string
      distro_version:
        required: true
        type: string
      should_trigger:
        required: true
        type: boolean
      artifacts_path:
        required: true
        type: string
      pypi_env:
        required: true
        type: string
      dist_folder:
        required: false
        type: string

jobs:

  ### PYPI UPLOAD JOB ###
  pypi_publish:
    runs-on: ubuntu-latest
    if: always() && inputs.should_trigger
    environment:
      name: ${{ inputs.pypi_env }}
    env:
      DIST_DIR: ${{ inputs.dist_folder || 'dist' }}
    steps:
    - uses: actions/checkout@v3
    - name: Download Source & Wheel distributions
      uses: actions/download-artifact@v3
      with:
        path: ${{ inputs.artifacts_path }}
    - run: ls -la ${{ inputs.artifacts_path }}
    - run: echo "Github Ref ${{ github.ref }}"
    - run: echo "Github Ref Name ${{ github.ref_name }}"
    - run: mkdir ${DIST_DIR}
    - name: "Copy .tar.gz Source Distribution into '${{ env.DIST_DIR }}' folder"
      run: |
        source_distributions=$(find ${{ inputs.artifacts_path }} -type f -name ${{ inputs.distro_name }}*.tar.gz)

        source_distributions_array=($source_distributions)

        source_distribution=${source_distributions_array[0]}  # a *.tar.gz file path

        source_distribution_name=$(basename "$source_distribution")

        # Check if all source distribution (.tar.gz) files have the same name
        for file in "${source_distributions_array[@]}"; do
          if [ "$source_distribution_name" != "$(basename "$file")" ]; then
            echo "Error: Not all Source Distribution .tar.gz files have the same name!"
            exit 1
          fi
        done
        echo " -- Will Upload : $source_distribution_name -- "
        echo "source_distribution=$source_distribution" >> $GITHUB_ENV
        cp "$source_distribution" ${DIST_DIR}

    - name: "Copy .whl Distributions into '${{ env.DIST_DIR }}' folder"
      run: |
        # Get all built Wheels and copy to dist folder
        for f in `find ${{ inputs.artifacts_path }} -type f -name ${{ inputs.distro_name }}*.whl`; do
          echo "F: $f";
          # TODO check for duplicates, which means that our build matrix produces the same wheel (need a different compiler that python such as pypy, cython, etc)
          cp $f ${DIST_DIR}
        done
    - run: ls -la ${DIST_DIR}
    - run: pip install tox==3.28

    - name: "Publish '${{ inputs.distro_name }}' version ${{ inputs.distro_version }} to Prod or Test PyPI server"
      env:
        PACKAGE_DIST_VERSION: ${{ inputs.distro_version }}
      run: tox -vv -s false -e deploy -- upload --non-interactive --skip-existing

    - run: echo "Published :\)"
