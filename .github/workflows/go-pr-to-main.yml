###############################
## Open Pull Request to Main ##
##     Reusable Workflow     ##
###############################

name: Open PR to Main

# WHEN a PR 'release-train' --> 'release' is closed with code merge
# THEN Open PR: 'release' --> 'Main'

# - designed to be triggered as part of 'release-me' tag event

# Participates in `release-me` GitOps Process:
#  User Br --PR -> Release --PR -> main 

on:
  workflow_call:
    inputs:
      # Head Branch
      release_branch:
        description: 'Release Branch; dedicated for Sem Ver bump, Changelog updates, making RC Releases (Release Candidate), deploying to Staging, etc'
        required: true
        default: 'release'
        type: string
      main_branch:
        default: 'main'
        description: 'Name of the Main Branch. Example: main, master'
        required: false
        type: string
    secrets:
      PR_RW_AND_ACTIONS_RW:
        description: 'GitHub Token, with read/write permissions to PRs and read/write permissions to Github Actions Workflows'
        required: true

jobs:
  pr_to_main:
    runs-on: ubuntu-latest
    env:
      RELEASE: ${{ inputs.release_branch }}
      MAIN_BR: ${{ inputs.main_branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 0 indicates all history for all branches and tags.
          set-safe-directory: ''  # `git config --global --add safe.directory <path>`
          token: '${{ secrets.PR_RW_AND_ACTIONS_RW }}'

      - name: Find most recently pushed Git Tag v*
        run: echo "LATEST_SEMVER_TAG=$(git tag -l 'v*' | sort -V | tail -n 1)" >> $GITHUB_ENV

      - name: Generate Linear Commit History from HEAD to main
        id: commit_generator
        uses: boromir674/action-commit-parser@v1.0.0
        with:
          # we do not override input.from_ref to use whatever we checked out with actions/checkout
          to_ref: ${{ env.LATEST_SEMVER_TAG }}

        # ommit oldest commit since somehow (todo investigate) it is expected to be the latest merge commit on main !
        # Yaml string is formatted into JSON github expression, which is a ready-to-use quoted thing to use in shell/bash
      - name: Store JSON Array of objects as JSON Array of strings, in a GITHUB_ENV Variable
        run: echo COMMITS_ARRAY=$(echo ${{ toJSON(steps.commit_generator.outputs.commits_array) }} | jq -c '[.[0:-1] | .[].message]') >> $GITHUB_ENV

      ##### Open PR: Release  -->  Main/Master #####
      - name: "Open PR  'head': ${{ env.RELEASE }} --> 'base': ${{ env.MAIN_BR }}"
        env:
          GH_TOKEN: ${{ secrets.PR_RW_AND_ACTIONS_RW }}
        run: |
          gh pr create --head "${{ env.RELEASE }}" --base "${{ env.MAIN_BR }}" \
            --title "[GITOPS] - Merging '${{ env.RELEASE }}' in '${{ env.MAIN_BR }}' - Releasing into Production" \
            --body "## :rocket: Releasing into Production :rocket:

          This PR signals our \`intention\` to
          - **Continue the Release Process**

          ### :point_right: Changes
          $(echo ${COMMITS_ARRAY} | jq -r | jq -r '.[]' | awk '{print "- " $0}')

          ### What's Happening in This PR?

          - We are merging the \`${{ env.RELEASE }}\` branch into the \`${{ env.MAIN_BR }}\` branch.
          - This action is typically an intermediate Step in the \`Release Process\`, where we **prepare** the changes for the **Release**.
            - Eg: Updating the **Changelog** file
            - Eg: Updating the **Version** file. if maintained
          - This is the last Pull Request, transitioning us from the \`release\` phase to the \`production\` phase.

          \`\`\`mermaid
          ---
          title: Typical 2-PR Release Process
          ---
          graph LR
            A[User Branch] -->|PR| B[Release Branch]
            B -->|PR| C[Main Branch]
          \`\`\`

          ### :white_check_mark: Automatic Merging Upon CI Checks :white_check_mark:

          **Before merging** into '${{ env.MAIN_BR }}', this PR **should be checked**, for meeting **standards**, such as:

          - All CI Jobs are Green / Passing
          - Acceptance Criteria/Tests passed, on a Staging Deployment
          - Code Review is approved by at least one developer
          "

