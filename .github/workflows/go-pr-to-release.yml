##################################
## Open Pull Request to Release ##
##       Reusable Workflow      ##
##################################

# name: 'Open PR, with Auto Merge, on Release'

# User Branch -- PR --> Release Branch
# - ASSUMES Caller's Workflow was triggered on pushed tag ref event!
# - designed to be called when 'release-me' tag is pushed (or 'board-n-relase')

# Indicates all intented for Release changes have been picked/selected
# (ie which feature/fix branches will be included)

# Participates in `release-me` GitOps Process:
#  User Br -- PR -> Release 

on:
  workflow_call:
    inputs:
      # User Br -- PR -> Release Base Branch
      release_branch:
        required: true
        type: string
        description: "Branch with 'Release' Purpose"
        default: 'release'
      backwords_compatibility:
        required: false
        type: string
        description: >
          "Etheir 'backwords-compatible' or 'backwords-incompatible'.
          If 'backwords-incompatible', then it hints for major Sem Ver bump, if this released.
          If 'backwords-compatible', then when this is the only change for release, it hints for patch or minor Sem Ver bump.
          If 'backwords-compatible', then when there are more changes for release, this does not impose minimum Bump level.
          "
        default: ''
      forbidden_branches:
        required: false
        default: 'main,master'
        description: >
          "Comma separated list of branches, which are forbidden to be merged into Release Branch.
          Set to main,master to crash this Job, in case accidentally the main/master branch was
          detected as User Branch.
          "
        type: string
    secrets:
      github_pat:
        description: 'GitHub Token, with read/write permissions to PRs and read/write permissions to Github Actions Workflows'
        required: true

jobs:
  pr_to_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags and branches
          set-safe-directory: ''  # `git config --global --add safe.directory <path>`
          token: '${{ secrets.github_pat }}'  # PAT with permissions to create PRs

      # Find Upstream Branch, pointing to the same commit as the Pushed Tag
      # ASSUMES Caller was triggered on pushed tag ref event
      - name: Discover User's Branch Name
        run: |
          name=$(git branch -a --contains "$(git rev-parse HEAD)" | sed -n '2p' | sed 's/.*origin\///')
          echo "[INFO] Discovered User Branch: $name"
          echo USER_BRANCH=$name >> $GITHUB_ENV
          echo "Discovered **User Branch**: $name" >> $GITHUB_STEP_SUMMARY

      - name: "Throw Error, if User Branch is empty: '${{ env.USER_BRANCH }}'"
        if: env.USER_BRANCH == ''
        run: |
          echo "**[ERROR]** Failed to find User Branch!  " >> $GITHUB_STEP_SUMMARY
          echo "Searched for an Upstream branch that \"contains\" the pushed `release-me` git tag, but we could not find one on the remote!" >> $GITHUB_STEP_SUMMARY
          echo "- **Exiting with ERROR**" >> $GITHUB_STEP_SUMMARY
          echo "Searched for an Upstream branch that \"contains\" the pushed `release-me` git tag, but we could not find one on the remote!. Exiting with error .." && exit 1

      - name: "Throw Error, if accidentally the User Branch is one of the Forbidden"
        # simple string search inside comma-separated input (may not be perfect)
        if: contains(fromJSON('["main", "master"]'), env.USER_BRANCH) 
        run: |
          echo "**[ERROR]** User Branch '${{ env.USER_BRANCH }}' is one of the Forbidden Branches:" >> $GITHUB_STEP_SUMMARY

          # split over comma separated forbidden branches to echo each in a SUMMARY line
          IFS=',' read -ra branches <<< "${{ inputs.forbidden_branches }}"
          for branch in "${branches[@]}"; do
            echo "- $branch" >> $GITHUB_STEP_SUMMARY
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Exiting with ERROR**" >> $GITHUB_STEP_SUMMARY
          echo "User Branch is one of the Forbidden Branches: '${{ env.USER_BRANCH }}'. Exiting with error .." && exit 1

      # Ensure Upstream Release Branch exists
      - run: git branch --track "${{ inputs.release_branch }}" "origin/${{ inputs.release_branch }}" || (git checkout -b "${{ inputs.release_branch }}" && git push -u origin ${{ inputs.release_branch }})

      # Close PR User Br --> Release, if found already open
      - name: Close PR, if already open
        # GH_TOKEN: ${{ secrets.github_pat }}
        env:
          GITHUB_TOKEN: ${{ secrets.github_pat }}
        run: |
          pr_id=$(gh pr list --state open --head "${{ env.USER_BRANCH }}" --base "${{ inputs.release_branch }}" --json number | jq -r '.[0].number')
          if [ -n "$pr_id" ] && [ "$pr_id" != "null" ]; then
            gh pr close $pr_id -c "Closing PR, to open new as ${{ env.USER_BRANCH }} --> ${{ inputs.release_branch }}"
          fi

      # prepare PR label, if supported backwords_compatibility input, else Warn
      - name: 'Add PR label ${{ inputs.backwords_compatibility }}'
        if: ${{ inputs.backwords_compatibility == 'backwords-compatible' || inputs.backwords_compatibility == 'backwords-incompatible' }}
        run: |
          echo "Input **Backwords Compatibility**: ${{ inputs.backwords_compatibility }}" >> $GITHUB_STEP_SUMMARY
          echo BACKWORDS_COMPATIBILITY=${{ inputs.backwords_compatibility }} >> $GITHUB_ENV

      - name: 'Warn, if unsupported value for backwords_compatibility'
        if: ${{ inputs.backwords_compatibility != 'backwords-compatible' && inputs.backwords_compatibility != 'backwords-incompatible' }}
        run: |
          if [ -n "${{ inputs.backwords_compatibility }}" ]; then
            echo "[WARN]: Unsupported value for input 'backwords_compatibility': '${{ inputs.backwords_compatibility }}'" >> $GITHUB_STEP_SUMMARY
          else
            echo "[INFO]: Value for input `backwords_compatibility` not provided." >> $GITHUB_STEP_SUMMARY
            echo "- Simply we assume user does not know/specify, and we do nothing about it." >> $GITHUB_STEP_SUMMARY
          fi
          echo BACKWORDS_COMPATIBILITY='' >> $GITHUB_ENV

      ####### PR: User Branch --> Release #######
      #  LABEL_FLAG="${{ env.BACKWORDS_COMPATIBILITY && '--label env.BACKWORDS_COMPATIBILITY' || '' }}"
      - name: "Create PR  'head': ${{ env.USER_BRANCH }}  -->  'base': ${{ inputs.release_branch }}"
        env:
          GH_TOKEN: ${{ secrets.github_pat }}
        run: |
          gh pr create --head "${{ env.USER_BRANCH }}" --base "${{ inputs.release_branch }}" \
            ${{ env.BACKWORDS_COMPATIBILITY && '--label env.BACKWORDS_COMPATIBILITY' || '' }} \
            --title "[GITOPS] - Merging '${{ env.USER_BRANCH }}' in '${{ inputs.release_branch }}' - Initiate Release Process" \
            --body "## :rocket: Initiating Release Process :rocket:

            This PR marks a pivotal moment in our deployment cycle, signaling that all changes on the **Release Train (RT)** are deemed ready for release. It represents the collective decision of our developers that the changes bundled in the RT are suitable to be released together.

            ### What's Happening in This PR?

            - We are merging the `${{ env.USER_BRANCH }}` branch into the `${{ inputs.release_branch }}` branch.
            - This action is a critical step, transitioning us from the development phase to the release phase.

            ### :white_check_mark: Automatic Merging Upon CI Checks :white_check_mark:

            - This PR is configured to **automatically merge** once all CI checks successfully pass.
            - These checks include running our comprehensive test suite on the RT branch to ensure a minimum standard of quality, covering sanity checks, QA, and unit tests.

            ### Ensuring Quality and Preparing for Release:

            - Our focus now shifts to **stress testing** and on CI.
            - We'll also handle essential chores, like updating the changelog with a new entry dedicated for the imminent release.

            ### :bulb: Next Steps in Our Journey:

            - Following the successful merge of this PR, we'll initiate the next phase, which involves merging the `${{ inputs.release_branch }}` into the **${{ env.MAIN_BR }}** branch.

            ### :hourglass_flowing_sand: Looking Ahead:

            - Once merged, our changes are set for the final stage of release preparation.
            "
      ##### Auto Merge: User Branch --> Release #####
      - name: 'Merge PR   ${{ env.USER_BRANCH }}  -->  ${{ inputs.release_branch }}'
        run: gh pr merge "${{ env.USER_BRANCH }}" --auto --delete-branch --merge
        env:
          # To allow "listener" Workflows to trigger, pass pat with read/write to Actions
          GH_TOKEN: ${{ secrets.github_pat }}

      # - name: 'Catch Error, if PR already exists'
      #   if: ${{ failure() }}
      #   run: |
      #     echo "[WARNING] PR already exists. Skipping PR creation, making sure Job is green"
      #     echo "## :warning: PR already exists :warning:" >> $GITHUB_STEP_SUMMARY
      #     echo "" >> $GITHUB_STEP_SUMMARY
      #     echo "This PR already exists. Skipping PR creation, making sure Job is green" >> $GITHUB_STEP_SUMMARY


# LEGACY CODE

      # - run: git branch --track "${{ inputs.release_branch }}" "origin/${{ inputs.release_branch }}" || git checkout -b "${{ inputs.release_branch }}" "origin/${{ inputs.release_branch }}"

      # - name: 'Derive name for Boarding target PR (ehad) branch: ${{ inputs.board_tag }}-${{ env.USER_BRANCH }}'
      #   run: echo "BOARDING_BR=${{ inputs.board_tag }}-${{ env.USER_BRANCH }}" >> $GITHUB_ENV

      # Ensure Upstream 'Boarding' Branch exists
      # - name: Track '${{ env.BOARDING_BR }}' Branch, if it exists on remote 'origin'
      #   run: git branch --track ${{ env.BOARDING_BR }} "origin/${{ env.BOARDING_BR }}" || echo PREEXISTING_BOARDING=false >> $GITHUB_ENV

      # - name: Create '${{ env.BOARDING_BR }}' branch, if it doesn't exist
      #   if: env.PREEXISTING_BOARDING == 'false'
      #   run: |
      #     git branch --track "${{ inputs.main_branch }}" "origin/${{ inputs.main_branch }}"
      #     git checkout -b "${{ env.BOARDING_BR }}" "${{ inputs.main_branch }}" || true
      #     git push origin "${{ env.BOARDING_BR }}" || true
