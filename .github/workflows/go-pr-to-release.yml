##################################
## Open Pull Request to Release ##
##       Reusable Workflow      ##
##################################

# name: 'Open PR, with Auto Merge, on Release'

# User Branch -- PR --> Release Branch
# - ASSUMES Caller's Workflow was triggered on pushed tag ref event!
# - designed to be called when 'release-me' tag is pushed (or 'board-n-relase')

# Indicates all intented for Release changes have been picked/selected
# (ie which feature/fix branches will be included)

# Participates in `release-me` GitOps Process:
#  User Br -- PR -> Release 

on:
  workflow_call:
    inputs:
      # User Br -- PR -> Release Base Branch
      release_branch:
        required: true
        type: string
        description: "Branch with 'Release' Purpose"
        default: 'release'
      main_branch:
        required: false
        type: string
        description: "Branch with 'Main' Purpose"
        default: 'main'
      backwords_compatibility:
        required: false
        type: string
        description: >
          "Either 'backwords-compatible' or 'backwords-incompatible'.
          If 'backwords-incompatible', then it hints for major Sem Ver bump, if this released.
          If 'backwords-compatible', then when this is the only change for release, it hints for patch or minor Sem Ver bump.
          If 'backwords-compatible', then when there are more changes for release, this does not impose minimum Bump level.
          "
        default: ''
      forbidden_branches:
        required: false
        default: 'main,master,release'
        description: >
          "Comma separated list of branches, which are forbidden to be merged into Release Branch.
          Set to main,master to crash this Job, in case accidentally the main/master branch was
          detected as User Branch.
          "
        type: string
    secrets:
      github_pat:
        description: 'GitHub Token, with read/write permissions to PRs and read/write permissions to Github Actions Workflows'
        required: true

jobs:
  pr_to_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags and branches
          set-safe-directory: ''  # `git config --global --add safe.directory <path>`
          token: '${{ secrets.github_pat }}'  # PAT with permissions to create PRs

      # Find Upstream Branch, pointing to the same commit as the Pushed Tag
      # ASSUMES Caller was triggered on pushed tag ref event
      - name: Discover User's Branch Name
        run: |
          name=$(git branch -a --contains "$(git rev-parse HEAD)" | sed -n '2p' | sed 's/.*origin\///')
          echo "[INFO] Discovered User Branch: $name"
          echo USER_BRANCH=$name >> $GITHUB_ENV
          echo "Discovered **User Branch**: $name" >> $GITHUB_STEP_SUMMARY

      - name: "Throw Error, if User Branch is empty: '${{ env.USER_BRANCH }}'"
        if: env.USER_BRANCH == ''
        run: |
          echo "**[ERROR]** Failed to find User Branch!  " >> $GITHUB_STEP_SUMMARY
          echo "Searched for an Upstream branch that \"contains\" the pushed `release-me` git tag, but we could not find one on the remote!" >> $GITHUB_STEP_SUMMARY
          echo "- **Exiting with ERROR**" >> $GITHUB_STEP_SUMMARY
          echo "Searched for an Upstream branch that \"contains\" the pushed `release-me` git tag, but we could not find one on the remote!. Exiting with error .." && exit 1

      - name: "Throw Error, if accidentally the User Branch is one of the Forbidden"
        # simple string search inside comma-separated input (may not be perfect)
        if: contains(fromJSON('["main", "master"]'), env.USER_BRANCH) 
        run: |
          echo "**[ERROR]** User Branch '${{ env.USER_BRANCH }}' is one of the Forbidden Branches:" >> $GITHUB_STEP_SUMMARY

          # split over comma separated forbidden branches to echo each in a SUMMARY line
          IFS=',' read -ra branches <<< "${{ inputs.forbidden_branches }}"
          for branch in "${branches[@]}"; do
            echo "- $branch" >> $GITHUB_STEP_SUMMARY
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Exiting with ERROR**" >> $GITHUB_STEP_SUMMARY
          echo "User Branch is one of the Forbidden Branches: '${{ env.USER_BRANCH }}'. Exiting with error .." && exit 1

      # Ensure Upstream Release Branch exists
      - run: git branch --track "${{ inputs.release_branch }}" "origin/${{ inputs.release_branch }}" || (git checkout -b "${{ inputs.release_branch }}" && git push -u origin ${{ inputs.release_branch }})

      # Close PR User Br --> Release, if found already open
      - name: Close PR, if already open
        # GH_TOKEN: ${{ secrets.github_pat }}
        env:
          GITHUB_TOKEN: ${{ secrets.github_pat }}
        run: |
          pr_id=$(gh pr list --state open --head "${{ env.USER_BRANCH }}" --base "${{ inputs.release_branch }}" --json number | jq -r '.[0].number')
          if [ -n "$pr_id" ] && [ "$pr_id" != "null" ]; then
            gh pr close $pr_id -c "Closing PR, to open new as ${{ env.USER_BRANCH }} --> ${{ inputs.release_branch }}"
          fi

      # prepare PR label, if supported backwords_compatibility input, else Warn
      - name: 'Add PR label ${{ inputs.backwords_compatibility }}'
        if: ${{ inputs.backwords_compatibility == 'backwords-compatible' || inputs.backwords_compatibility == 'backwords-incompatible' }}
        run: |
          echo "Input **Backwords Compatibility**: ${{ inputs.backwords_compatibility }}" >> $GITHUB_STEP_SUMMARY
          echo BACKWORDS_COMPATIBILITY=${{ inputs.backwords_compatibility }} >> $GITHUB_ENV
          echo CLI_FLAG="--label ${{ inputs.backwords_compatibility }}" >> $GITHUB_ENV

      - name: 'Warn, if unsupported value for backwords_compatibility'
        if: ${{ inputs.backwords_compatibility != 'backwords-compatible' && inputs.backwords_compatibility != 'backwords-incompatible' }}
        run: |
          if [ -n "${{ inputs.backwords_compatibility }}" ]; then
            echo "[WARN]: Unsupported value for input 'backwords_compatibility': '${{ inputs.backwords_compatibility }}'" >> $GITHUB_STEP_SUMMARY
          else
            echo '[INFO]: Value for input `backwords_compatibility` not provided.' >> $GITHUB_STEP_SUMMARY
            echo "- Simply we assume user does not know/specify, and we do nothing about it." >> $GITHUB_STEP_SUMMARY
          fi
          echo BACKWORDS_COMPATIBILITY='' >> $GITHUB_ENV

      ####### PR: User Branch --> Release #######
      # TODO: auto populate section '### :white_check_mark: Automatic Merging Upon CI Checks :white_check_mark:' inside PR Body
      #    - Automatically GET with Gh API the Required Checks matching the release branch rule
      #    - use YAML to parse Single QA Job Required/allowed_skip/allowed_fail Inputs
      #    - use above info to populate the PR Body section

      - name: Find most recently pushed Git Tag v*
        run: echo "LATEST_SEMVER_TAG=$(git tag -l 'v*' | sort -V | tail -n 1)" >> $GITHUB_ENV

      - name: Generate Linear Commit History from HEAD to main
        id: commit_generator
        uses: boromir674/action-commit-parser@v1.0.0
        with:
          # we do not override input.from_ref to use whatever we checked out with actions/checkout
          to_ref: ${{ env.LATEST_SEMVER_TAG }}

        # Yaml string is formatted into JSON github expression, which is a ready-to-use quoted thing to use in shell/bash
        # ommit oldest commit since somehow (todo investigate) it is expected to be the latest merge commit on main !
      - name: Store JSON Array of objects as JSON Array of strings, in a GITHUB_ENV Variable
        run: echo COMMITS_ARRAY=$(echo ${{ toJSON(steps.commit_generator.outputs.commits_array) }} | jq -c '[.[0:-1] | .[].message]') >> $GITHUB_ENV

      ## Create PR ##
      - name: "Create PR  'head': ${{ env.USER_BRANCH }}  -->  'base': ${{ inputs.release_branch }}"
        env:
          GH_TOKEN: ${{ secrets.github_pat }}
        run: |
          gh pr create --head "${{ env.USER_BRANCH }}" --base "${{ inputs.release_branch }}" ${{ env.CLI_FLAG }} \
            --title "[GITOPS] - Merging '${{ env.USER_BRANCH }}' in '${{ inputs.release_branch }}' - Initiate Release Process" \
            --body "## :rocket: **Marking for Release** all changes from **${{ env.USER_BRANCH }}** Branch :rocket:

          This PR signals our `intention` that all changes from **${{ env.USER_BRANCH }}** branch should be **included for Release**.

          ### :large_blue_diamond: Changes
          $(echo ${COMMITS_ARRAY} | jq -r | jq -r '.[]' | awk '{print "- " $0}')

          ### What's Happening in This PR?

          - We are merging the `${{ env.USER_BRANCH }}` branch into the `${{ inputs.release_branch }}` branch.
          - We have decided that next Release should exactly include all changes from the `${{ env.USER_BRANCH }}` branch.
          - This action is typically the 1st Step in the `Release Process`, where we **prepare** the changes for the **Release**.

          \`\`\`mermaid
          ---
          title: Typical 2-PR Release Process
          ---
          graph LR
            A[User Branch] -->|PR| B[Release Branch]
            B -->|PR| C[Main Branch]
          \`\`\`

          ### :bulb: Next Steps in Our Journey:

          Following the successful merge of this PR, we can initiate the **next phase**, which involves for example:
          - Ensuring `Release Chores` are completed, such as:
            - Updating the maintained Changelog file
            - Updating the maintained Version file
            - Generating the Github Release Notes
          - `Merging` the `${{ inputs.release_branch }}` into the **${{ inputs.main_branch }}** branch.
          "

      # - name: Extract PR API URL, using Github REST API, through CLI Client
      #   run: echo PR_API_URL="$(gh pr view --json url | jq -r '.url')" >> $GITHUB_ENV

      # # EG: https://api.github.com/repos/boromir674/gitops-automation/pulls/50
      # - run: 'echo "Derived PR API URL: ${{ env.PR_API_URL}}" >> $GITHUB_STEP_SUMMARY'

      # ### Generate updated PR Body contents, based on Conventional Commits
      # - name: Construct PR Body contents
      #   uses: octue/generate-pull-request-description@b5257de511dfdd6e1de7adee90b62b6279ce40a0  # 1.0.0.beta-2
      #   id: pr-description
      #   with:
      #     pull_request_url: ${{ env.PR_API_URL }}
      #     api_token: ${{ secrets.GITHUB_TOKEN }}

      # ## Update PR Body Contents ##
      # - name: Update pull request body
      #   uses: riskledger/update-pr-description@bb136dcb15789ce886dee9c8e04332c5cbf34832  # v2
      #   with:
      #     body: ${{ steps.pr-description.outputs.pull_request_description }}
      #     token: ${{ secrets.GITHUB_TOKEN }}

      ##### Auto Merge: User Branch --> Release #####
      - name: 'Merge PR   ${{ env.USER_BRANCH }}  -->  ${{ inputs.release_branch }}'
        run: gh pr merge "${{ env.USER_BRANCH }}" --auto --delete-branch --merge
        env:
          # To allow "listener" Workflows to trigger, pass pat with read/write to Actions
          GH_TOKEN: ${{ secrets.github_pat }}
