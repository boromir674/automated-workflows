#############################
## Merge Release into Main ##
#############################

# Triggered on pushed tags auto-prod-* ie auto-prod-1.0.0
# last part is Sem Ver to use for new Release

# export tt='auto-prod-1.0.0'
# git tag -d "$tt"; git push --delete origin "$tt"; git tag "$tt" && git push origin "$tt"

#### Does the following:
#  1. Triggers 'Release' Stress Tests
#  2. if Tests and Code Review OK
#  3. Merge PR 'Release' -->  'Main'
####

# idea: support input for doing sem ver parse from source code/files instead of from git tags

on:
  # push:
  #   tags:
  #     - auto-prod-*
  workflow_call:
    inputs:
      commit_message:
        description: >
          "Merge Commit Message on main branch, when PR auto merges.
          Eg if 'My Shiny Python Package' is the input, then the
          commit message will be '[NEW] My Shiny Python Package v<semver>'
          for tag events with Sem Ver like 'auto-prod-1.2.0'
          commit message will be '[DEV] My Shiny Python Package v<semver>'
          for tag events with Sem Ver like 'auto-prod-1.2.0-dev'
          "
        required: true
        type: string
      main_branch:
        description: 'Name of the Main Branch. Example: main, master'
        required: false
        type: string
        default: ${{ vars.GIT_MAIN_BRANCH || 'main' }}
      release_branch:
        description: 'Name of Branch with Relase Purpose; dedicated for Sem Ver bump, Changelog updates, making RC Releases, deploying to Staging, etc'
        required: false
        type: string
        default: ${{ vars.GIT_RELEASE_BRANCH || 'release' }}
      changelog_file:
        description: 'Name of the CHANGELOG.md file, to check if it was updated with new Release entry'
        required: false
        type: string
        default: ${{ vars.GIT_CHANGELOG_FILE || 'CHANGELOG.md' }}
    secrets:
      pat_token:
        description: >
          "Personal Access (aka fine-grained) GitHub Token, with read/write permissions to PRs
          and optionally read/write permissions to Github Actions Workflows.
          "
        required: true

jobs:
  merge_release_into_main:
    runs-on: ubuntu-latest
    env:
      # aliases of some inputs for shorter code
      MAIN_BR: ${{ inputs.main_branch }}
      RELEASE_BR: ${{ inputs.release_branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 0 indicates all history for all branches and tags.
          set-safe-directory: ''  # `git config --global --add safe.directory <path>`
          token: '${{ secrets.pat_token }}'
      - run: git branch --track "${{ env.RELEASE_BR }}" "origin/${{ env.RELEASE_BR }}" 

      # REQUIRE ${{ github.ref }} to be a Tag on the Release Branch, else ERROR and EXIT
      - name: "Check if '${{ github.ref }}' is a tag on '${{ env.RELEASE_BR }}' branch"
        uses: rickstaa/action-contains-tag@v1
        id: tag_on_release
        with:
          tag: "${{ github.ref }}"
          reference: "${{ env.RELEASE_BR }}"  # the branch to check if the tag is on
      - name: "Exit with Error, if '${{ github.ref }}' NOT on '${{ env.RELEASE_BR }}' branch"
        if: ${{ steps.tag_on_release.outputs.retval == 'false' }}
        run: echo "Tag '${{ github.ref }}' on '${{ env.RELEASE_BR }}' = ${{ steps.tag_on_release.outputs.retval }}" && exit 1

      # READ NEW SEM VER from pushed tag, ie '1.2.0' from 'auto-prod-1.2.0'
      - name: Parse Sem Ver, intented for Release, from pushed Tag
        id: sem_ver
        run: |
          NEW_SEMVER=$(echo "${{ github.ref }}" | grep -oP '(?<=auto-prod-).+')
          echo "[INFO]: New Sem Ver: $NEW_SEMVER"
          echo "**New Sem Ver: $NEW_SEMVER**" >> $GITHUB_STEP_SUMMARY
          echo SEMVER=$NEW_SEMVER >> $GITHUB_OUTPUT

      # CHECK that CHANGELOG.md was updated in the PR, with entry corresponding to new Semantic Release Version
      - name: Check if Release entry was added to '${{ inputs.changelog_file }}', corresponding to new Semantic Version
        # Idea: ATTEMP TO AUTOMATICALLY UPDATE CHANGELOG given conditions
        # if not label indicating changelog is OK not found
        # then compute section to inject
        # show content in a PR COMMENT,
        # allow user to review
        # this should happen before the PR is merged to allow user to alter the MARKDOWN content throug same PR COMMENT !
        # INJECT into CHANGELOG.md, and commit after user approved

        # TLDR GET PR comments
        # gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/boromir674/gitops-automation/issues/350/comments | jq -r '[.[] | {body: .body, url: .url}]'
        id: check_changelog
        uses: boromir674/action-changelog-ci@v2.0.0
        with:
          ref_to_check: ${{ github.ref }}
          main_branch: ${{ env.MAIN_BR }}
          changelog_file: ${{ inputs.changelog_file }}
          version_to_check: ${{ steps.sem_ver.outputs.SEMVER }}

      - name: Fail Job if '${{ inputs.changelog_file }}' was not updated according to the Rules
        if: steps.check_changelog.outputs.retval == 'false'
        run: |
          echo "## CHANGELOG.md CI error" >> $GITHUB_STEP_SUMMARY
          echo '`CHANGELOG.md` file was **not updated according to the Rules**  ' >> $GITHUB_STEP_SUMMARY
          echo "Passing all Rule Checks is required for Merge to Main" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**TO FIX:**" >> $GITHUB_STEP_SUMMARY
          echo "- Update \`CHANGELOG.md\` file and push the changes" >> $GITHUB_STEP_SUMMARY
          echo '- Trigger Workflow; ie `git tag -f auto-prod-1.2.0 && git push origin -f auto-prod-1.2.0`' >> $GITHUB_STEP_SUMMARY
          exit 1

      ## COMPUTE RC TAG and Merge (to main) Commit Message, for PROD or DEV ##
      - name: "Assume PROD (Public Changes: major, minor, or patch), unless 'dev' in Sem Ver"
        # PROD ->  Public Changes: at least one of major, minor, or patch bump happened
        # DEV  -> Private Changes: internal changes, only docs, ci, tests, etc
        # todo: shorten code by combining this with below steps
        id: prod_or_dev
        run: |
          if [[ "${{ steps.sem_ver.outputs.SEMVER }}" == *dev* ]]; then
            echo "PROD_OR_DEV=DEV" >> $GITHUB_OUTPUT
          else
            echo "PROD_OR_DEV=PROD" >> $GITHUB_OUTPUT
          fi

      - name: "IF PROD, Derive RC Git Tag as 'v${{ steps.sem_ver.outputs.SEMVER }}-rc' and imminent merge commit message"
        # - PROD Commit Message: [NEW or FIX] -> At least Major, minor, or patch Bump
        #   ie 1.0.1-> v1.0.1-rc
        if: ${{ steps.prod_or_dev.outputs.PROD_OR_DEV == 'PROD' }}
        run: |
          echo RC_TAG="v${{ steps.sem_ver.outputs.SEMVER }}-rc" >> $GITHUB_ENV
          echo CM_MSG="[NEW] ${{ inputs.commit_message }} v${{ steps.sem_ver.outputs.SEMVER }} Release" >> $GITHUB_ENV

      - name: "IF DEV, Derive RC Git Tag as 'v${{ steps.sem_ver.outputs.SEMVER }}' and imminent merge commit message"
        # - [DEV] maps to DEV -> Sem Ver like 1.2.0-dev happened, with only ci, tests, docs, etc internal changes
        #   ie 1.0.1-dev-> v1.0.1-dev
        if: ${{ steps.prod_or_dev.outputs.PROD_OR_DEV == 'DEV' }}
        run: |
          echo RC_TAG="v${{ steps.sem_ver.outputs.SEMVER }}" >> $GITHUB_ENV
          echo CM_MSG="[DEV] ${{ inputs.commit_message }} v${{ steps.sem_ver.outputs.SEMVER }} Release" >> $GITHUB_ENV

      ##### EVENT: PUSH RC TAG #####
      - name: "Create and Push RC Tag ${{ env.RC_TAG }}"
        run: |
          git tag -d "$RC_TAG" || true
          git tag "$RC_TAG"
          git push --delete origin "$RC_TAG" || true
          git push origin "$RC_TAG"

          echo "RC Tag ${{ env.RC_TAG }} was **pushed to remote**" >> $GITHUB_STEP_SUMMARY
          echo " -> Pushed tag $RC_TAG"

      ## Create for Auto Deploy Label, if not available in Repository PR Labels
      - name: Search for 'auto-deploy', among the registered Repository PR Labels
        run: echo AUTO_DEPLOY_LABEL_OBJECT="$(gh label list --json id,name,description,isDefault --jq '.[] | select(.name == "auto-deploy")')" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.pat_token }}
      - name: Register 'auto-deploy', in Repository PR Labels, if not already present
        if: ${{ env.AUTO_DEPLOY_LABEL_OBJECT == '' }}
        run: |
          gh label create auto-deploy --force --description "Branch Ready for Prod/Main Deployment" --color 2ea44f
          echo "Label **auto-deploy was registered** in the **Repository PR Labels**!" >> $GITHUB_STEP_SUMMARY
        env:
          GH_TOKEN: ${{ secrets.pat_token }}

      ##### EVENT LABEL PR with 'auto-deploy', to trigger 'Tag Main' Workflow after merge #####
      - name: "Add 'auto-deploy' PR label to trigger Git Tagging Workflow, after merge"
        run: gh pr edit "${{ env.RELEASE_BR }}" --add-label "auto-deploy"
        env:
          GH_TOKEN: ${{ secrets.pat_token }}

      ## Write Merge Commit Message in PR comments ##
      - run: |
          echo '## Merge Commit Message on `main`' >> $GITHUB_STEP_SUMMARY
          echo "Derived by Automation for Auto Merge" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.CM_MSG }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      # Write Merge Commit Message to STEP SUMMARY (todo: do not write new if workflows fails and re-runs)
      - name: "Write Merge Commit Message in PR comments"
        run: |
          gh pr comment "${{ env.RELEASE_BR }}" --body \
            "### PR Merge Commit Message on \`main\`

            **Derived by Automation for Auto Merge:**
            \`\`\`
            ${{ env.CM_MSG }}
            \`\`\`
            "
        env:
          GH_TOKEN: ${{ secrets.pat_token }}

      ##### AUTO MERGE PR; ie when CI Pass + Human Review OK + Webhook Statuses Green + etc #####
      - name: "Merge PR   'head': ${{ env.RELEASE_BR }}  -->  'base': ${{ env.MAIN_BR }}"
        run: |
          git checkout "${{ env.RELEASE_BR }}"
          gh pr merge "${{ env.RELEASE_BR }}" --auto --delete-branch --merge --subject "${{ env.CM_MSG }}"
        env:
          GH_TOKEN: ${{ secrets.pat_token }}
