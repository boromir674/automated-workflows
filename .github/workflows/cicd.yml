name: 'CI/CD Pipeline'

on:
  push:
    branches:
      - main
      # exclude pushes to 'release' branch
      - '!release'
    tags:
      - v*
      - run-ci

env:
  JOB_MATRIX: "{\"tests_filter\": [\"docker_pol0 or docker_pol1\", \"docker_pol2 or docker_pol3\", \"test_release_me_gitops_phase_1 or code_viz or docker_test_when_tag_not_given\", \"pypi\", \"static_code or go_single_status\"]}"

  ##### Pipeline - 1st level overrides #####
  # set to false to guarantee Job Skip
  TESTS_PIPE_ON: "true"
  DOCS_PIPE_ON: "true"
  ##########################

  #### TESTS Pipeline Config ####
  TESTS_ALWAYS: "false"  # 2nd level override
  TESTS_JOB_POLICY: '1'  # accept all for Test (only 1 policy supported atm)

  #### DOCS Pipeline Config ####
  # set to true to guarantee Job Run, and skip any other conditions (ie specific code changes)
  DOCS_ALWAYS: "false"   # 2nd level override

  DOCS_JOB_POLICY: '2'  # {2, 3}
  DOCS_PY_VERSION: "3.12"


jobs:
  configure_pipeline:
    runs-on: ubuntu-latest
    env:
      # Git Ops Signal for dynamic Pipeline Configuration
      BOARDING_MSG: "Auto Merging '[^']+' carrying '([^']+)' Changes"
    steps:
      # escape parethesis in commit message to prepare next step regex match
      # escape should also handle multiline commit messages from ${{ github.event.head_commit.message }}
      - name: Escape parethesis in head commit's Commit Message
        run: |
          HEAD_COMMIT_MSG="$(echo "${{ github.event.head_commit.message }}" | sed 's/(/\\(/g' | sed 's/)/\\)/g')"
          echo "HEAD_COMMIT_MSG=$HEAD_COMMIT_MSG" >> $GITHUB_ENV
          echo "**Head Commit Message**:" >> $GITHUB_STEP_SUMMARY
          echo "$HEAD_COMMIT_MSG" >> $GITHUB_STEP_SUMMARY

      - name: Check for Git Ops Signal in Commit Message
        # interpret Commit Message: if head_commit.message matches BOARDING_MSG regex
        run: |
          if [[ "${{ env.HEAD_COMMIT_MSG }}" =~ ${BOARDING_MSG} ]]; then

            affected_components="${BASH_REMATCH[1]}"
            echo "--> Detected Affected Components: $affected_components <--"

            echo "AFFECTED_COMPONENTS=$affected_components" >> $GITHUB_ENV
          fi

      - name: Read Pipeline Config, from Git Ops Signal
        if: ${{ env.AFFECTED_COMPONENTS != '' }}
        id: pipe_config_from_gitops
        run: |
          echo PIPE_TESTS_GITOPS_POLICY='0' >> $GITHUB_ENV
          echo PIPE_DOCS_GITOPS_POLICY='0' >> $GITHUB_ENV
          if [[ "${{ env.AFFECTED_COMPONENTS }}" =~ "Source" ]]; then
            echo PIPE_TESTS_GITOPS_POLICY='1' >> $GITHUB_ENV
          fi
          if [[ "${{ env.AFFECTED_COMPONENTS }}" =~ "Docs" ]]; then
            echo PIPE_DOCS_GITOPS_POLICY='1' >> $GITHUB_ENV
          fi

      # Configure Pipeline, while respecting Higher level overrides
      - name: Configure Pipeline
        id: set_pipe_config
        run: |
          echo PIPE_TESTS_POLICY="${{ (env.TESTS_PIPE_ON != 'true' && '0') || (env.TESTS_ALWAYS == 'true' && '1') || (env.AFFECTED_COMPONENTS != '' && env.PIPE_TESTS_GITOPS_POLICY) || env.TESTS_JOB_POLICY }}" >> $GITHUB_OUTPUT
          echo PIPE_DOCS_POLICY="${{ (env.DOCS_PIPE_ON != 'true' && '0') || (env.DOCS_ALWAYS == 'true' && '1') || (env.AFFECTED_COMPONENTS != '' && env.PIPE_DOCS_GITOPS_POLICY) || env.DOCS_JOB_POLICY }}" >> $GITHUB_OUTPUT
          echo PIPE_DOCS_PY="${{ env.DOCS_PY_VERSION }}" >> $GITHUB_OUTPUT
          echo JOB_MATRIX="${JOB_MATRIX}" >> $GITHUB_OUTPUT
    outputs:
    ## TEST MATRIX ##
      matrix: ${{ steps.set_pipe_config.outputs.JOB_MATRIX }}
    ## TESTS - Pipeline Settings ##
      PIPE_TESTS_POLICY: ${{ steps.set_pipe_config.outputs.PIPE_TESTS_POLICY }}
    ## DOCS - Pipeline Settings ##
      PIPE_DOCS_POLICY: ${{ steps.set_pipe_config.outputs.PIPE_DOCS_POLICY }}
      PIPE_DOCS_PY: ${{ steps.set_pipe_config.outputs.PIPE_DOCS_PY }}

  test_workflows:
    needs: configure_pipeline
    if: ${{ needs.configure_pipeline.outputs.PIPE_TESTS_POLICY == '1' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJSON(needs.configure_pipeline.outputs.matrix)}}
      # matrix:
      #   tests_filter: ['docker_pol0 or docker_pol1', 'docker_pol2 or docker_pol3', 'code_viz or docker_test_when_tag_not_given', 'pypi or static_code']
    steps:
      - name: Checkout the Automated Test Suite
        uses: actions/checkout@v4
        with:
          repository: 'boromir674/cicd-test'
          ref: 'main'
          path: 'cicd-test'
      - name: Setup Python ${{ env.py_ver }}
        env:
          py_ver: '3.10'
        uses: actions/setup-python@v4
        with:
          python-version: '${{ env.py_ver }}'
      - name: Install tox
        run: pip install 'tox<4.0'

      - name: Pin Python Dependencies
        working-directory: cicd-test
        run: tox -e pin-deps

      - name: Run Automated Test Suite
        env:
          # Tests code invokes gh CLI: `gh api -X GET /repos/boromir674/cicd-test/actions/workflows`
          # which requires the GH_TOKEN env var to be set. We pass the default GITHUB_TOKEN
          # as it is with the default permissions
          GH_TOKEN: ${{ github.token }}
          CICD_TEST_GH_TOKEN: ${{ secrets.CICD_TEST_GH_TOKEN }}
        working-directory: cicd-test
        run: tox -e test -vv -- -n auto -vvs -k '${{ matrix.tests_filter }}'

### DOCS BUILD/TEST - DOCUMENTATION SITE ###
  docs:
    name: Build Documentation
    needs: configure_pipeline
    # bafaa2c2a014758a4421fe9b5c02ba66dbfdbef6
    uses: ./.github/workflows/policy_docs.yml
    with:
      run_policy: '${{ needs.configure_pipeline.outputs.PIPE_DOCS_POLICY }}'
      python_version: ${{ needs.configure_pipeline.outputs.PIPE_DOCS_PY }}
      command: "export PIP_CONSTRAINT=constraints.txt && tox -e pin-deps -- -E docs && tox -e docs --sitepackages -vv -s false"
      # command: "tox -e docs --sitepackages -vv -s false"

  prod_or_test:
    name: 'Check which Git Branch we are on'
    if: ${{ startsWith(github.event.ref, 'refs/tags/v') }}
    runs-on: ubuntu-latest
    env:
      MAIN_BR: ${{ vars.GIT_MAIN_BRANCH || 'main' }}
      RELEASE_BR: ${{ vars.GIT_RELEASE_BRANCH || 'release' }}
    steps:
      # Fetch 'Main' and 'Release' branches
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # PRODUCTION RELEASE if tag was pushed on 'main' branch
      - name: "Check if '${{ github.ref }}' tag is on '${{ env.MAIN_BR }}' branch"
        uses: rickstaa/action-contains-tag@v1
        id: main_contains_tag
        with:
          reference: ${{ env.MAIN_BR }}
          tag: "${{ github.ref }}"

      - if: ${{ steps.main_contains_tag.outputs.retval == 'true' }}
        run: echo ENVIRONMENT_NAME=PROD_DEPLOYMENT >> $GITHUB_ENV

      # TEST RELEASE if tag was pushed on 'release' branch (head branch of PR to main)
      - if: ${{ ! env.ENVIRONMENT_NAME }}
        name: "Check if '${{ github.ref }}' tag is on '${{ env.RELEASE_BR }}' branch"
        uses: rickstaa/action-contains-tag@v1
        id: release_contains_tag
        with:
          reference: ${{ env.RELEASE_BR }}
          tag: "${{ github.ref }}"

      - if: ${{ ! env.ENVIRONMENT_NAME }}
        run: echo 'SANITY CHECK -> this must NOT run'

      - if: ${{ steps.release_contains_tag.outputs.retval == 'true' }}
        run: echo 'SANITY CHECK -> Is Tag on Release? ${{ steps.release_contains_tag.outputs.retval == 'true' }}'

      - if: ${{ (! env.ENVIRONMENT_NAME) && steps.release_contains_tag.outputs.retval == 'true' }}
        run: echo ENVIRONMENT_NAME=TEST_DEPLOYMENT >> $GITHUB_ENV

      - name: Pick Production or Test Environment, if tag was pushed on ${{ env.MAIN_BR }} or ${{ env.RELEASE_BR }} branch
        id: set_environment_name
        run: |
          echo "ENVIRONMENT_NAME=${{ env.ENVIRONMENT_NAME }}" >> $GITHUB_OUTPUT
          echo "AUTOMATED_DEPLOY=${{ env.ENVIRONMENT_NAME && 'true' || 'false' }}" >> $GITHUB_OUTPUT
    outputs:
      ENVIRONMENT_NAME: ${{ steps.set_environment_name.outputs.ENVIRONMENT_NAME }}
      AUTOMATED_DEPLOY: ${{ steps.set_environment_name.outputs.AUTOMATED_DEPLOY }}

### Make a Github Release ###
  gh_release:
    needs: [test_workflows, prod_or_test]
    if: ${{ needs.prod_or_test.outputs.AUTOMATED_DEPLOY == 'true' }}
    uses: ./.github/workflows/gh-release.yml
    with:
      tag: ${{ github.ref_name }}
      draft: ${{ needs.prod_or_test.outputs.ENVIRONMENT_NAME == 'TEST_DEPLOYMENT' }}
    secrets:
      # pass a PAT, to render in GH as ie: 'boromir674 released this yesterday', instead of 'github-actions released this yesterday'
      gh_token: ${{ secrets.GA_WORKFLOWS_CI_MAKE_RELEASE }}
